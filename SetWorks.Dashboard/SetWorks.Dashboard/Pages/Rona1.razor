@page "/rona1"
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory ClientFactory

<h1>Hello the world.</h1>


@if (getBranchesError)
{
    <p>Unable to get Covid data from the feds. Please try again later.</p>
}
else
{

    <DataGrid TItem="RonaStateSummary"
              Data="@ronaStates"
              Filterable=true
              FilterMethod="DataGridFilterMethod.StartsWith"
              ShowPager=true
              ShowPageSizes=false
              PageSize=20
              Responsive=true>
        <DataGridColumn Field="@nameof(RonaStateSummary.State)" Caption="State" Editable=false>
        </DataGridColumn>
    </DataGrid>

}

@code {
    private IEnumerable<RonaStateSummary> ronaStates = Array.Empty<RonaStateSummary>();
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var url = "https://api.covidtracking.com/v1/states/current.json";
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        //request.Headers.Add("Accept", "application/vnd.github.v3+json");
        //request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            ronaStates = await JsonSerializer.DeserializeAsync
                <IEnumerable<RonaStateSummary>>(responseStream);
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

    public class RonaStateSummary
    {
        [JsonPropertyName("state")]
        public string State { get; set; }
    }
}
