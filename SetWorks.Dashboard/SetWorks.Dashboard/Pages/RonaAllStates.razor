@page "/rona/allstates"
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject NavigationManager NavigationManager 

<h2>Covid Cases - Current & Historical</h2>


@if (getBranchesError)
{
    <p>Unable to get Covid data from the feds. Please try again later.</p>
}
else
{

    <DataGrid TItem="RonaStateSummary"
              Data="@filteredData"
              Filterable=true
              FilterMethod="DataGridFilterMethod.StartsWith"
              ShowPager=true
              ShowPageSizes=false
              Editable=false
              PageSize=20
              Responsive=true>
        <DataGridDateColumn Field="@nameof(RonaStateSummary.Date)" Caption="Date" DisplayFormat="{0:yyyy-MM-dd}">
            <FilterTemplate>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@datePicker" TValue="DateTime?" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range"
                            DatesChanged="(e => DatesSelectedEventHandler(e))" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FilterTemplate>
        </DataGridDateColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.State)" Caption="State">
            <FilterTemplate>
                            @{
                                var selectedValue = @context.SearchValue ?? "*";
                                <Select TValue="string" SelectedValues="@filteredStates" TValue="string" 
                                        Multiple="true" SelectedValuesChanged="(e => StatesSelectedEventHandler(e))" MaxVisibleItems="4"  >
                                    <SelectItem Value="@("*")">All</SelectItem>

                                    @foreach (var item in allData.Select(p => p.State).Distinct())
                                    {
                                        <SelectItem Value="@item">@item</SelectItem>
                                    }
                                </Select>
                            }
                        </FilterTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.TotalTestResults)" Caption="Total" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End" >
            <DisplayTemplate>@($"{(context.TotalTestResults is null ? 0 : context.TotalTestResults?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.Positive)" Caption="Positive" SortDirection="SortDirection.Descending" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.Positive is null ? 0 : context.Positive?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.Negative)" Caption="Negative" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.Negative is null ? 0 : context.Negative?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.HospitalizedCurrently)" Caption="Hospitalized" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.HospitalizedCurrently is null ? 0 : context.HospitalizedCurrently?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
    </DataGrid>

}

@code {
    private IEnumerable<RonaStateSummary> filteredData = Array.Empty<RonaStateSummary>();
    private IEnumerable<RonaStateSummary> allData = Array.Empty<RonaStateSummary>();
    private bool getBranchesError;
    private bool shouldRender;
    //private DateTime defaultDateFilter = new DateTime(2021, 3, 7);
    // private List<string> defaultStatesSelected = new List<string> { "*" };
    private DatePicker<DateTime?> datePicker;

    private List<string> filteredStates = new List<string>();
    private List<DateTime?> filteredDates = new List<DateTime?>();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var url = "https://api.covidtracking.com/v1/states/current.json";
        url = "test-data/allstates.json";
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);


        var client = ClientFactory.CreateClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions { WriteIndented = true };
            using var responseStream = await response.Content.ReadAsStreamAsync();
            filteredData = await JsonSerializer.DeserializeAsync
                <IEnumerable<RonaStateSummary>>(responseStream);
            allData = filteredData;

            InitializeFilters();
        }
        else
        {
            getBranchesError = true;
        }



        shouldRender = true;
    }

    private void InitializeFilters()
    {
        //Setup the DatePicker UI
        var maxDate = allData.Select(rd => rd.Date).Max();
        this.datePicker.Min = allData.Select(rd => rd.Date).Min();
        this.datePicker.Max = maxDate;
        this.filteredDates.Add(maxDate);
        this.datePicker.Dates = this.filteredDates;

        //Setup the State list UI.
        this.filteredStates.Add("*");

        //Now do the actual filtering.
        FilterData();

    }

    private void StatesSelectedEventHandler(IReadOnlyList<string> vals)
    {
        //filteredData = Array.Empty<RonaStateSummary>();
        //if (vals.Count == 1 && vals[0] == "*") filteredData = allData;
        this.filteredStates = vals.ToList();
        FilterData();
    }
    private void DatesSelectedEventHandler(IReadOnlyList<DateTime?> vals)
    {
        //if (vals.Count < 2) return;
        this.filteredDates = vals.ToList();
        FilterData();
    }

    private void FilterData()
    {
        //At this point it assumes that we have good data.  
        var filtered = allData;

        //Filter by a single date
        if (this.filteredDates.Count == 1)
        {
            filtered = filtered.Where(rd => filteredDates.Contains(rd.Date));            
        }

        //Filter by a date range, is more complex.
        if (this.filteredDates.Count == 2)
        {
            var min = this.filteredDates.Min();
            var max = this.filteredDates.Max();
            filtered = filtered.Where(rd => rd.Date >= min && rd.Date <= max);
        }

        //Filter by State
        if (filteredStates.Count > 0 && !filteredStates.Contains("*"))
        {
            filtered = filtered.Where(rd => filteredStates.Contains(rd.State)); 
        }
        filteredData = filtered;

    }

    public class RonaStateSummary
    {
        [JsonPropertyName("state")]
        public string State { get; set; }

        [JsonPropertyName("date")]
        [JsonConverter(typeof(DateTimeJsonConverter))]
        public DateTime Date { get; set; }

        //Quick and dirty way to deserialize this without rolling a custom JsonConverter.
        //Source data has lots of nulls.  In order for this to work, our field has to be nullable.  
        //Real-world scenario the data would have gone through some ETL and nulls would never exist! (lol)
        [JsonPropertyName("totalTestResults")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? TotalTestResults { get; set; }

        [JsonPropertyName("positive")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? Positive { get; set; } = 0;

        [JsonPropertyName("negative")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? Negative { get; set; } = 0;

        [JsonPropertyName("hospitalizedCurrently")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingDefault)]
        public int? HospitalizedCurrently { get; set; } = 0;
        

        //* Display the Date, State, Total, Positive, Negative, and Hospitalization Rates as columns.
    //[{"date":20210307,"state":"CA","positive":3501394,"probableCases":null,"negative":null,"pending":null,"totalTestResultsSource":"totalTestsViral",
    //"totalTestResults":49646014,"hospitalizedCurrently":4291,"hospitalizedCumulative":null,"inIcuCurrently":1159,"inIcuCumulative":null,
    //"onVentilatorCurrently":null,"onVentilatorCumulative":null,"recovered":null,"lastUpdateEt":"3/7/2021 02:59",
    //"dateModified":"2021-03-07T02:59:00Z","checkTimeEt":"03/06 21:59","death":54124,"hospitalized":null,"hospitalizedDischarged":null,
    // //"dateChecked":"2021-03-07T02:59:00Z","totalTestsViral":49646014,"positiveTestsViral":null,"negativeTestsViral":null,
    // //"positiveCasesViral":3501394,"deathConfirmed":null,"deathProbable":null,"totalTestEncountersViral":null,"totalTestsPeopleViral":null,
    // //"totalTestsAntibody":null,"positiveTestsAntibody":null,"negativeTestsAntibody":null,"totalTestsPeopleAntibody":null,
    // "positiveTestsPeopleAntibody":null,"negativeTestsPeopleAntibody":null,"totalTestsPeopleAntigen":null,"positiveTestsPeopleAntigen":null,
    // "totalTestsAntigen":null,"positiveTestsAntigen":null,"fips":"06",
    // "positiveIncrease":3816,"negativeIncrease":0,"total":3501394,"totalTestResultsIncrease":133186,"posNeg":3501394,
    // "dataQualityGrade":null,"deathIncrease":258,"hospitalizedIncrease":0,"hash":"63c5c0fd2daef2fb65150e9db486de98ed3f7b72",
    // "commercialScore":0,"negativeRegularScore":0,"negativeScore":0,"positiveScore":0,"score":0,"grade":""},

    }

    public class DateTimeJsonConverter : JsonConverter<DateTime>
    {
        public override DateTime Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options) =>
                DateTime.ParseExact(reader.GetInt32()!.ToString()!,
                    "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);

        public override void Write(
            Utf8JsonWriter writer,
            DateTime dateTimeValue,
            JsonSerializerOptions options) =>
                writer.WriteStringValue(dateTimeValue.ToString(
                    "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture));
        //public override DateTimeOffset Read(
        //    ref Utf8JsonReader reader,
        //    Type typeToConvert,
        //    JsonSerializerOptions options) =>
        //        DateTimeOffset.ParseExact(reader.GetString()!,
        //            "MM/dd/yyyy", System.Globalization.CultureInfo.InvariantCulture);

        //public override void Write(
        //    Utf8JsonWriter writer,
        //    DateTimeOffset dateTimeValue,
        //    JsonSerializerOptions options) =>
        //        writer.WriteStringValue(dateTimeValue.ToString(
        //            "MM/dd/yyyy", System.Globalization.CultureInfo.InvariantCulture));
    }

}
