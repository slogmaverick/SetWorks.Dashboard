@page "/rona/allstates"
@using System.Text.Json
@using System.Text.Json.Serialization
@using SetWorks.Dashboard.EF

@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject NavigationManager NavigationManager 
@inject ICovidDataService CovidDataService
@inject ICovidRepository CovidRepository

<h2>Covid Cases - Current & Historical</h2>


@if (getBranchesError)
{
    <p>Unable to get Covid data from the feds. Please try again later.</p>
}
else
{

    <DataGrid TItem="RonaStateSummary"
              Data="@filteredData"
              Filterable=true
              FilterMethod="DataGridFilterMethod.StartsWith"
              ShowPager=true
              ShowPageSizes=false
              Editable=false
              PageSize=20
              Responsive=true>
        <DataGridDateColumn Field="@nameof(RonaStateSummary.Date)" Caption="Date" DisplayFormat="{0:yyyy-MM-dd}">
            <FilterTemplate>
                <Addons>
                    <Addon AddonType="AddonType.Body">
                        <DatePicker @ref="@datePicker" TValue="DateTime?" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range"
                            DatesChanged="(e => DatesSelectedEventHandler(e))" />
                    </Addon>
                    <Addon AddonType="AddonType.End">
                        <Button Color="Color.Light" Clicked="@(()=>datePicker.ToggleAsync())">
                            <Icon Name="IconName.CalendarDay" />
                        </Button>
                    </Addon>
                </Addons>
            </FilterTemplate>
        </DataGridDateColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.State)" Caption="State">
            <FilterTemplate>
                            @{
                                var selectedValue = @context.SearchValue ?? "*";
                                <Select TValue="string" SelectedValues="@filteredStates" TValue="string" 
                                        Multiple="true" SelectedValuesChanged="(e => StatesSelectedEventHandler(e))" MaxVisibleItems="4"  >
                                    <SelectItem Value="@("*")">All</SelectItem>

                                    @foreach (var item in allData.Select(p => p.State).Distinct())
                                    {
                                        <SelectItem Value="@item">@item</SelectItem>
                                    }
                                </Select>
                            }
                        </FilterTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.TotalTestResults)" Caption="Total" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End" >
            <DisplayTemplate>@($"{(context.TotalTestResults is null ? 0 : context.TotalTestResults?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.Positive)" Caption="Positive" SortDirection="SortDirection.Descending" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.Positive is null ? 0 : context.Positive?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.Negative)" Caption="Negative" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.Negative is null ? 0 : context.Negative?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(RonaStateSummary.HospitalizedCurrently)" Caption="Hospitalized" TextAlignment="TextAlignment.End" Filterable="false" HeaderTextAlignment="TextAlignment.End">
            <DisplayTemplate>@($"{(context.HospitalizedCurrently is null ? 0 : context.HospitalizedCurrently?.ToString("N0"))}")</DisplayTemplate>
        </DataGridColumn>
    </DataGrid>

}

@code {
    private IEnumerable<RonaStateSummary> filteredData = Array.Empty<RonaStateSummary>();
    private IEnumerable<RonaStateSummary> allData = Array.Empty<RonaStateSummary>();
    private bool getBranchesError;
    private bool shouldRender;
    //private DateTime defaultDateFilter = new DateTime(2021, 3, 7);
    // private List<string> defaultStatesSelected = new List<string> { "*" };
    private DatePicker<DateTime?> datePicker;

    private List<string> filteredStates = new List<string>();
    private List<DateTime?> filteredDates = new List<DateTime?>();

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        //var data = await CovidDataService.GetAllData();
        var data = await CovidRepository.GetAllData();
        if (data.Count > 0)
        {
            filteredData = data;
            allData = filteredData;

            InitializeFilters();
        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;


        //var url = "https://api.covidtracking.com/v1/states/current.json";
        //url = "test-data/allstates.json";
        //var request = new HttpRequestMessage(HttpMethod.Get,
        //    url);


        //var client = ClientFactory.CreateClient();
        //client.BaseAddress = new Uri(NavigationManager.BaseUri);

        //var response = await client.SendAsync(request);

        //if (response.IsSuccessStatusCode)
        //{
        //    var options = new JsonSerializerOptions { WriteIndented = true };
        //    using var responseStream = await response.Content.ReadAsStreamAsync();
        //    filteredData = await JsonSerializer.DeserializeAsync
        //        <IEnumerable<RonaStateSummary>>(responseStream);
        //    allData = filteredData;

        //    InitializeFilters();
        //}
        //else
        //{
        //    getBranchesError = true;
        //}



    }

    private void InitializeFilters()
    {
        //Setup the DatePicker UI
        var maxDate = allData.Select(rd => rd.Date).Max();
        this.datePicker.Min = allData.Select(rd => rd.Date).Min();
        this.datePicker.Max = maxDate;
        this.filteredDates.Add(maxDate);
        this.datePicker.Dates = this.filteredDates;

        //Setup the State list UI.
        this.filteredStates.Add("*");

        //Now do the actual filtering.
        FilterData();

    }

    private void StatesSelectedEventHandler(IReadOnlyList<string> vals)
    {
        //filteredData = Array.Empty<RonaStateSummary>();
        //if (vals.Count == 1 && vals[0] == "*") filteredData = allData;
        this.filteredStates = vals.ToList();
        FilterData();
    }
    private void DatesSelectedEventHandler(IReadOnlyList<DateTime?> vals)
    {
        //if (vals.Count < 2) return;
        this.filteredDates = vals.ToList();
        FilterData();
    }

    private void FilterData()
    {
        //At this point it assumes that we have good data.  
        var filtered = allData;

        //Filter by a single date
        if (this.filteredDates.Count == 1)
        {
            filtered = filtered.Where(rd => filteredDates.Contains(rd.Date));            
        }

        //Filter by a date range, is more complex.
        if (this.filteredDates.Count == 2)
        {
            var min = this.filteredDates.Min();
            var max = this.filteredDates.Max();
            filtered = filtered.Where(rd => rd.Date >= min && rd.Date <= max);
        }

        //Filter by State
        if (filteredStates.Count > 0 && !filteredStates.Contains("*"))
        {
            filtered = filtered.Where(rd => filteredStates.Contains(rd.State)); 
        }
        filteredData = filtered;

    }


}
